#! /usr/bin/env bash

scs_initialize__svn_repository() {

	local svn_username="$1"
	local svn_password="$2"
	local svn_uri="$3"
	local svn_path="$4"

	if ! svnlook info "${svn_path}" 2> /dev/null > /dev/null ; then
	
		svnadmin create "${svn_path}"

	fi
	
	envsubst '$SCS_SVN_USERNAME' < /opt/pre-revprop-change.template > "${svn_path}/hooks/pre-revprop-change" \
		&& chmod +x "${svn_path}/hooks/pre-revprop-change"

	svnsync initialize "file://${svn_path}" "${svn_uri}"  \
		--non-interactive                                 \
		--source-trust-server-cert-failures unknown-ca,cn-mismatch,expired,not-yet-valid,other \
		--source-username "${svn_username}"               \
		--source-password "${svn_password}"               \
		--allow-non-empty

	svnsync synchronize "file://${svn_path}" "${svn_uri}" \
		--non-interactive                                 \
		--source-trust-server-cert-failures unknown-ca,cn-mismatch,expired,not-yet-valid,other \
		--source-username "${svn_username}"               \
		--source-password "${svn_password}"

}

scs_initialize__generate_authors_from_svn() {

	local svn_path="$1" ; shift 1
	local authors_file="$1" ; shift 1

	local sed_expressions=()

	while [[ "$#" != 0 ]]; do

		sed_expressions+=('-e' "$1")
		shift

	done

	touch "${authors_file}"

	#
	# Because this is running in a alpine container we're need to take in account that, to save them precious bytes, we only
	# have the shorthand options on the standard commands.
	#
	# awk (-F|--field-separator)
	# sed (-r|--regex-extended) (-e|--expression)
	#
	svn log --quiet --incremental "file://${svn_path}" \
		| awk -F"|" '{ print $2 }'                     \
		| sort | uniq                                  \
		| sed -E -e 's/^[ \t]+//;s/[ \t]+$//' "${sed_expressions[@]}" \
		| uniq                                         \
		> "${authors_file}"

}

scs_initialize__generate_authors_from_git() {

	exit 1

}

scs_initialize__git_repository() {

	local git_username="$1"
	local git_password="$2"
	local git_uri="$3"
	local git_path="$4"

	git init --bare "${git_path}"

	if [[ -n "${git_uri}" ]] ; then 
	
		git -C "${git_path}" remote replace origin "${git_uri}"

		if [[ -z "${git_username}" ]] ; then git -C "${git_path}" config "credential.${git_uri}.username" "${git_username}" ; fi
		if [[ -z "${git_password}" ]] ; then git -C "${git_path}" config "credential.${git_uri}.helper" "! echo 'password=${git_password}'" ; fi

		git -C "${git_path}" pull origin
	
	fi

}

scs_initialize__svn_to_git() {

	local svn_path="$1"
	local git_path="$2"
	local authors="$3"

	git init --bare "${git_path}"                             \
		&& git -C "${git_path}" svn init "file://${svn_path}" \
			--stdlayout                                       \
			--use-svnsync-props                               \
			--authors-file="${authors}"                       \
			--prefix "svn"                                    \
		&& git -C "${git_path}" svn fetch

}

scs_initialize__git_to_svn() {

	#
	# With our populated git repo do an initial git svn dcommit of everything
	#

	exit 1

}

scs_initialize__start_webhooks() { 	

	exit 1

}

scs_initialize__help() {

	printf '%b\n' \
		'scs-initialize - Initilization and start-up script for a docker container with  ' \
		'                 the goal of synchronizing a SVN and GIT repository             ' \
		'                                                                                ' \
		'Usage:                                                                          ' \
		'  scs-initialize [options]                                                      ' \
		'  scs-initialize [direction] [options] -- [author expressions]                  ' \
		'                                                                                ' \
		'Direction: <svn-to-git|git-to-svn>                                              ' \
		'  Definese the direction of the synchronization after initalization, if no      ' \
		'  direction is provided it is assumed that the repositories are in sync and no  ' \
		'  action is neccesary after initalization.                                      ' \
		'                                                                                ' \
		'Author expressions: <sed expression>...                                         ' \
		'  Depending on the initlaization direction we want to generate an authors file  ' \
		'  on using the provided username/email combination. These sed expressions allow ' \
		'  you to maniulate the output here. The result should be an authors file.       ' \
		'                                                                                ' \
		'  Because SVN sometimes doesn\x27t know who authored a particular commit there  ' \
		'  is a "(no author)" author. To make converting the author names to a valid     ' \
		'  email make sure to take "(no author)"-author in account.                      ' \
		'                                                                                ' \
		'Options:                                                                        ' \
		'  --svn <username> <password> <uri>                                             ' \
		'  --git <username> <password> <uri>                                             ' \
		'                                                                                ' \
		'Examples:                                                                       ' \
		'  scs-initialize svn-to-git                                     \\              ' \
		'      --svn svnsync \x2770p__s3cret\x27 \x27http://svn-repository.local\x27 \\  ' \
		'      --git gitsync \x27cl4551f13d\x27 \x27http://git-repository.local\x27  \\  ' \
		'      -- \x27s/\\(no author\\)/no-author/\x27 \x27s/ $/@email.local\x27         ' \
		'                                                                                ' \
		'  Initialize a the local working repositories and provide the sed expressions   ' \
		'  generate the authors.                                                         ' \
		'                                                                                '

}

scs_initialize__main() {

	set -e
	set -o pipefail
	set -o errtrace

	local svn_path="${SCS_SVN_PATH:=/var/svn}"
	local git_path="${SCS_GIT_PATH:=/var/git}"

	local svn_username="${SCS_SVN_USERNAME}"
	local svn_password="${SCS_SVN_PASSWORD}" 
	local svn_uri="${SCS_SVN_URI}"

	local git_username="${SCS_GIT_USERNAME}"
	local git_password="${SCS_GIT_PASSWORD}"
	local git_uri="${SCS_GIT_URI}"
	
	local initalization_direction
	local sed_expressions=()
	
	
	case "$1" in
		"git-to-svn") initalization_direction="$1" ; shift 1 ;;
		"svn-to-git") initalization_direction="$1" ; shift 1 ;;
	esac

	while [[ $# != 0 ]]; do

		case "$1" in
			--svn) svn_username="$2" ; svn_password="$3" ; svn_uri="$4" ; shift 4 ;;
			--git) git_username="$2" ; git_password="$3" ; git_uri="$4" ; shift 4 ;;

			--) {
				shift ; sed_expressions=("$@")
				break 2
			} ;;

			"-?" | --help) scs_initialize__help ; exit ;;

			*) {
				printf "[ initialize ] Unknown option [ %s ]" "$1" >&2
				exit 1
			}
		esac

	done

	export SCS_SVN_PATH="${svn_path}"
	export SCS_GIT_PATH="${git_path}"
	
	export SCS_AUTHORS="${SCS_AUTHORS:=/var/AUTHORS}"

	export SCS_SVN_USERNAME="${svn_username}"
	export SCS_SVN_PASSWORD="${svn_password}"
	export SCS_SVN_URI="${svn_uri}"
	
	export SCS_GIT_USERNAME="${git_username}"
	export SCS_GIT_PASSWORD="${git_password}"
	export SCS_GIT_URI="${git_uri}"

	if [[ "${initalization_direction}" = "svn-to-git" ]] ; then 
		
		scs_initialize__svn_repository "${svn_username}" "${svn_password}" "${svn_uri}" "${svn_path}"
		scs_initialize__generate_authors_from_svn "${svn_path}" "${SCS_AUTHORS}" "${sed_expressions[@]}"
		scs_initialize__svn_to_git "${svn_path}" "${git_path}" "${SCS_AUTHORS}"
		
		exit

	elif [[ "${initalization_direction}" = "git-to-svn" ]] ; then 

		scs_initialize__git_repository "${git_username}" "${git_password}" "${git_uri}" "${git_path}"
		scs_initialize__generate_authors_from_git "${git_path}" "${SCS_AUTHORS}"
		scs_initialize__git_to_svn "${git_path}" "${svn_path}" "${SCS_AUTHORS}"

		exit

	elif [[ -z "${initalization_direction}" ]] ; then
	
		scs_initialize__svn_repository "${svn_username}" "${svn_password}" "${svn_uri}" "${svn_path}"
		scs_initialize__git_repository "${git_username}" "${git_password}" "${git_uri}" "${git_path}"
		scs_initialize__start_webhooks

		exit

	fi

	exit 1

}

(return 0 2>/dev/null) || scs_initialize__main "$@"
